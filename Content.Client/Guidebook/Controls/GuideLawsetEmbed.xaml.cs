using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.UserInterface.ControlExtensions;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

using Content.Shared.Silicons.Laws;

namespace Content.Client.Guidebook.Controls;

/// <summary>
/// Control for embedding an AI Lawset in a guidebook
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideLawsetEmbed : BoxContainer, IDocumentTag, ISearchableControl, IPrototypeRepresentationControl
{
    private ISawmill _logging = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    public IPrototype? RepresentedPrototype { get; private set; }

    public GuideLawsetEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideLawsetEmbed(string lawset) : this()
    {
        GenerateControl(_prototype.Index<SiliconLawsetPrototype>(lawset));
    }

    public GuideLawsetEmbed(SiliconLawsetPrototype lawset) : this()
    {
        GenerateControl(lawset);
    }

    private void GenerateControl(SiliconLawsetPrototype lawset)
    {
        RepresentedPrototype = lawset;
        // Setting it here makes it easier for a later system to change it later
        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = Color.DarkCyan
        };
        LawsetName.SetMarkup($"[bold]{Loc.GetString(lawset.Name ?? lawset.ID)}[/bold]");
        int i = 1;
        foreach (string lawID in lawset.Laws)
        {
            string locLawString = string.Empty;
            if (!_prototype.TryIndex(lawID, out SiliconLawPrototype? lawPrototype))
            {
                _logging.Error($"Specified SiliconLawPrototype \"{lawID}\" is not a valid Law prototype");
            }
            else
            {
                // This should never be null, I'm assuming there's a better way of doing this that will
                // be brought up in review
                locLawString = Loc.GetString(lawPrototype?.LawString ?? string.Empty);
                RichTextLabel lawN = new();
                lawN.HorizontalExpand = true;
                lawN.SetMarkup($"[bold]Law {i}:[/bold] {locLawString}");
                LawsetContainer.AddChild(lawN);
            }
            i++;
        }
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Lawset", out var id))
        {
            _logging.Error("Lawset embed tag is missing lawset prototype argument");
            return false;
        }

        if (!_prototype.TryIndex(id, out SiliconLawsetPrototype? lawset))
        {
            _logging.Error($"Specified SiliconLawsetPrototype \"{id}\" is not a valid Lawset prototype");
            return false;
        }

        GenerateControl(lawset);

        control = this;
        return true;
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        Visible = CheckMatchesSearch(query) ? state : !state;
    }
}